This folder contains work in progress with the goal to integrate diverse time window decomposition strategies. Three features are still missing and need to be added for obtaining the desired functionalities:

* The solving loop to minimize the makespan per time window with a time limit
* Compression by postprocessing the best schedule obtained for a time window
* (Re-)ordering of a given sequence of operations based on bottleneck machines

The current state of the work combines encoding parts for static or dynamic time window decomposition, but does not yet perform the actual makespan minimization and lacks the compression as well as bottleneck machine features.

However, example calls like the following can be tried, where the output also indicates the options that should be made available by the feature-complete version:

$ python3 main.py scratch/instance.lp scratch/start.lp --warn=none --const windows=2
$ python3 main.py scratch/instance.lp scratch/start.lp --warn=none --const windows=2 --dynamic
$ python3 main.py scratch/instance.lp scratch/start.lp --warn=none --const windows=2 --const factor=4
$ python3 main.py scratch/instance.lp scratch/start.lp --warn=none --const windows=2 --const factor=4 --const ordering=2
$ python3 main.py scratch/instance.lp scratch/start.lp --warn=none --const windows=2 --const factor=4 --const ordering=0 0
$ python3 main.py scratch/instance.lp scratch/start.lp --warn=none --const windows=2 --const factor=4 --const ordering=3 0
$ python3 main.py scratch/instance.lp scratch/assign.lp --warn=none --const windows=2 --const factor=4 --const ordering=0
